/**
 */
package org.palladiosimulator.sharedmobility.model.model.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.palladiosimulator.sharedmobility.model.model.util.SharedmobilityModelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SharedmobilityModelItemProviderAdapterFactory extends SharedmobilityModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SharedmobilityModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.Domain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainItemProvider domainItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.Domain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainAdapter() {
		if (domainItemProvider == null) {
			domainItemProvider = new DomainItemProvider(this);
		}

		return domainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.Participant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParticipantItemProvider participantItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.Participant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParticipantAdapter() {
		if (participantItemProvider == null) {
			participantItemProvider = new ParticipantItemProvider(this);
		}

		return participantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.Driver} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DriverItemProvider driverItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.Driver}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDriverAdapter() {
		if (driverItemProvider == null) {
			driverItemProvider = new DriverItemProvider(this);
		}

		return driverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.Attacker} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttackerItemProvider attackerItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.Attacker}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttackerAdapter() {
		if (attackerItemProvider == null) {
			attackerItemProvider = new AttackerItemProvider(this);
		}

		return attackerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.Car} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CarItemProvider carItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.Car}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCarAdapter() {
		if (carItemProvider == null) {
			carItemProvider = new CarItemProvider(this);
		}

		return carItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.Van} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VanItemProvider vanItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.Van}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVanAdapter() {
		if (vanItemProvider == null) {
			vanItemProvider = new VanItemProvider(this);
		}

		return vanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.MobilityServiceProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobilityServiceProviderItemProvider mobilityServiceProviderItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.MobilityServiceProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobilityServiceProviderAdapter() {
		if (mobilityServiceProviderItemProvider == null) {
			mobilityServiceProviderItemProvider = new MobilityServiceProviderItemProvider(this);
		}

		return mobilityServiceProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.RidePoolingProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RidePoolingProviderItemProvider ridePoolingProviderItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.RidePoolingProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRidePoolingProviderAdapter() {
		if (ridePoolingProviderItemProvider == null) {
			ridePoolingProviderItemProvider = new RidePoolingProviderItemProvider(this);
		}

		return ridePoolingProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.CarpoolingProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CarpoolingProviderItemProvider carpoolingProviderItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.CarpoolingProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCarpoolingProviderAdapter() {
		if (carpoolingProviderItemProvider == null) {
			carpoolingProviderItemProvider = new CarpoolingProviderItemProvider(this);
		}

		return carpoolingProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.ReservationService_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReservationService_ItemProvider reservationService_ItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.ReservationService_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReservationService_Adapter() {
		if (reservationService_ItemProvider == null) {
			reservationService_ItemProvider = new ReservationService_ItemProvider(this);
		}

		return reservationService_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.PaymentService_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaymentService_ItemProvider paymentService_ItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.PaymentService_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaymentService_Adapter() {
		if (paymentService_ItemProvider == null) {
			paymentService_ItemProvider = new PaymentService_ItemProvider(this);
		}

		return paymentService_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.FleetMaintainigService_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FleetMaintainigService_ItemProvider fleetMaintainigService_ItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.FleetMaintainigService_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFleetMaintainigService_Adapter() {
		if (fleetMaintainigService_ItemProvider == null) {
			fleetMaintainigService_ItemProvider = new FleetMaintainigService_ItemProvider(this);
		}

		return fleetMaintainigService_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.RegistrationService_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegistrationService_ItemProvider registrationService_ItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.RegistrationService_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegistrationService_Adapter() {
		if (registrationService_ItemProvider == null) {
			registrationService_ItemProvider = new RegistrationService_ItemProvider(this);
		}

		return registrationService_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.MatchingService_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchingService_ItemProvider matchingService_ItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.MatchingService_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchingService_Adapter() {
		if (matchingService_ItemProvider == null) {
			matchingService_ItemProvider = new MatchingService_ItemProvider(this);
		}

		return matchingService_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.PublicAgency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PublicAgencyItemProvider publicAgencyItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.PublicAgency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPublicAgencyAdapter() {
		if (publicAgencyItemProvider == null) {
			publicAgencyItemProvider = new PublicAgencyItemProvider(this);
		}

		return publicAgencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.TraficLight} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraficLightItemProvider traficLightItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.TraficLight}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraficLightAdapter() {
		if (traficLightItemProvider == null) {
			traficLightItemProvider = new TraficLightItemProvider(this);
		}

		return traficLightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.SpeedLimit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpeedLimitItemProvider speedLimitItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.SpeedLimit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpeedLimitAdapter() {
		if (speedLimitItemProvider == null) {
			speedLimitItemProvider = new SpeedLimitItemProvider(this);
		}

		return speedLimitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.NetworkConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkConnectorItemProvider networkConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.NetworkConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkConnectorAdapter() {
		if (networkConnectorItemProvider == null) {
			networkConnectorItemProvider = new NetworkConnectorItemProvider(this);
		}

		return networkConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.sharedmobility.model.model.Services} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServicesItemProvider servicesItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.sharedmobility.model.model.Services}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServicesAdapter() {
		if (servicesItemProvider == null) {
			servicesItemProvider = new ServicesItemProvider(this);
		}

		return servicesItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (domainItemProvider != null) domainItemProvider.dispose();
		if (participantItemProvider != null) participantItemProvider.dispose();
		if (driverItemProvider != null) driverItemProvider.dispose();
		if (userItemProvider != null) userItemProvider.dispose();
		if (attackerItemProvider != null) attackerItemProvider.dispose();
		if (carItemProvider != null) carItemProvider.dispose();
		if (vanItemProvider != null) vanItemProvider.dispose();
		if (mobilityServiceProviderItemProvider != null) mobilityServiceProviderItemProvider.dispose();
		if (ridePoolingProviderItemProvider != null) ridePoolingProviderItemProvider.dispose();
		if (carpoolingProviderItemProvider != null) carpoolingProviderItemProvider.dispose();
		if (reservationService_ItemProvider != null) reservationService_ItemProvider.dispose();
		if (paymentService_ItemProvider != null) paymentService_ItemProvider.dispose();
		if (fleetMaintainigService_ItemProvider != null) fleetMaintainigService_ItemProvider.dispose();
		if (registrationService_ItemProvider != null) registrationService_ItemProvider.dispose();
		if (matchingService_ItemProvider != null) matchingService_ItemProvider.dispose();
		if (publicAgencyItemProvider != null) publicAgencyItemProvider.dispose();
		if (traficLightItemProvider != null) traficLightItemProvider.dispose();
		if (speedLimitItemProvider != null) speedLimitItemProvider.dispose();
		if (networkConnectorItemProvider != null) networkConnectorItemProvider.dispose();
		if (servicesItemProvider != null) servicesItemProvider.dispose();
	}

}
